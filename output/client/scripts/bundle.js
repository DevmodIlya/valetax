/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./sass/main.scss":
/*!************************!*\
  !*** ./sass/main.scss ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://godevmodewebpack/./sass/main.scss?");

/***/ }),

/***/ "./scripts/Alert.js":
/*!**************************!*\
  !*** ./scripts/Alert.js ***!
  \**************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Alert = void 0;\r\n// @ts-ignore\r\nwindow.states = {};\r\nclass Alert {\r\n    constructor(options, callOnReady) {\r\n        this.options = options;\r\n        this.modal_parent = document.createElement(\"div\");\r\n        this.modal = document.createElement(\"div\");\r\n        this.buttonsCntr = document.createElement(\"div\");\r\n        this.elements = [];\r\n        this.checkSum = 0;\r\n        this.buttonsCntr.classList.add(\"buttons-container\");\r\n        this.calcChecksum(options.title + \"\" + options.message);\r\n        this.id = this.checkSum;\r\n        // @ts-ignore\r\n        if (window.states[this.id]) {\r\n            return;\r\n        }\r\n        // @ts-ignore\r\n        window.states[this.id] = this;\r\n        if (options.message) {\r\n            let msgBoxEl;\r\n            if (options.type !== 2) {\r\n                this.alertTitle = this.appendTextualDiv(options.title, \"message-title-box\");\r\n                msgBoxEl = this.alertTitle;\r\n                msgBoxEl = this.appendTextualDiv(options.message, \"message-box\");\r\n                this.messageBox = msgBoxEl;\r\n            }\r\n            else {\r\n                const spinner = document.createElement(\"div\");\r\n                options.parentClass = \"loader-box\";\r\n                spinner.classList.add(\"spinner\");\r\n                msgBoxEl = this.appendTextualDiv(options.message, \"loader\");\r\n                msgBoxEl === null || msgBoxEl === void 0 ? void 0 : msgBoxEl.appendChild(spinner);\r\n            }\r\n            if (options.removeOnSelect && msgBoxEl) {\r\n                msgBoxEl.addEventListener('click', () => {\r\n                    this.remove();\r\n                });\r\n            }\r\n        }\r\n        if (options.callbackBtnNoText) {\r\n            this.callbackBtnNoText = options.callbackBtnNoText;\r\n        }\r\n        if (options.callbackBtnYesText) {\r\n            this.callbackBtnYesText = options.callbackBtnYesText;\r\n        }\r\n        if (options.callbackNo) {\r\n            this.appendButton(options.callbackBtnNoText || \"Cancel\", \"Cancel\", options.callbackNo);\r\n        }\r\n        if (options.callbackYes) {\r\n            this.appendButton(options.callbackBtnYesText || \"Ok\", \"Ok\", options.callbackYes);\r\n        }\r\n        this.elements.forEach((element) => {\r\n            if (element.hasAttribute(\"type\")) {\r\n                this.buttonsCntr.appendChild(element);\r\n            }\r\n            else {\r\n                this.modal.appendChild(element);\r\n            }\r\n        });\r\n        this.modal.appendChild(this.buttonsCntr);\r\n        this.modal_parent.className = \"parent-modal \" + options.parentClass;\r\n        this.modal.className = \"alert-modal animate__animated animate__\" + (options.animationStyle || \"\");\r\n        this.modal_parent.appendChild(this.modal);\r\n        if (!options.appender) {\r\n            document.body.appendChild(this.modal_parent);\r\n        }\r\n        if (options.appender) {\r\n            this.modal_parent.style.position = \"absolute\";\r\n            options.appender.appendChild(this.modal_parent);\r\n        }\r\n        if (callOnReady && typeof callOnReady === 'function' && options.context) {\r\n            callOnReady.bind(options.context)(this, this.messageBox);\r\n        }\r\n    }\r\n    handleActionBtn(btn, fn) {\r\n        if (fn && typeof fn === \"function\") {\r\n            fn();\r\n        }\r\n    }\r\n    getTitle() {\r\n        return this.alertTitle;\r\n    }\r\n    setTitleText(text) {\r\n        if (text && text !== \"\" && this.alertTitle) {\r\n            this.alertTitle.innerHTML = text;\r\n        }\r\n    }\r\n    setCallback(fn, type) {\r\n        if (!fn || typeof fn !== \"function\") {\r\n            return;\r\n        }\r\n        if (type === 0) {\r\n            this.callbackAcWNo = fn;\r\n            this.noBtn = this.appendButton(this.callbackBtnNoText || \"Cancel\", \"Cancel\", fn, true);\r\n            this.buttonsCntr.appendChild(this.noBtn);\r\n            return;\r\n        }\r\n        if (type === 1) {\r\n            this.callbackAcWYes = fn;\r\n            this.yesBtn = this.appendButton(this.callbackBtnYesText || \"Ok\", \"Ok\", fn, true);\r\n            this.buttonsCntr.appendChild(this.yesBtn);\r\n        }\r\n    }\r\n    remove() {\r\n        // @ts-ignore\r\n        delete window.states[this.id];\r\n        this.modal_parent.remove();\r\n        // document.body.removeChild(this.modal_parent);\r\n    }\r\n    calcChecksum(str) {\r\n        if (!str) {\r\n            str = \"a\";\r\n        }\r\n        let tmp = 0;\r\n        if (this.checkSum > 0) {\r\n            tmp = this.checkSum;\r\n        }\r\n        for (let i = 0; i < str.length; i++) {\r\n            let chr = str.charCodeAt(i);\r\n            this.checkSum = ((this.checkSum << 5) - this.checkSum) + chr;\r\n            this.checkSum |= 0; // Convert to 32bit integer\r\n        }\r\n        return this.checkSum + tmp;\r\n    }\r\n    appendTextualDiv(message, cssClass) {\r\n        if (!message) {\r\n            return null;\r\n        }\r\n        const messageBox = document.createElement(\"div\");\r\n        if (typeof message === \"string\") {\r\n            if (message.indexOf(\"<div\") > -1 || message.indexOf(\"<iframe\") > -1 || message.indexOf(\"<img\") > -1 || message.indexOf(\"<input\") > -1) {\r\n                messageBox.innerHTML = message;\r\n            }\r\n            else {\r\n                const messageTxt = document.createTextNode(message);\r\n                messageBox.appendChild(messageTxt);\r\n            }\r\n        }\r\n        if (typeof message === \"object\") {\r\n            messageBox.appendChild(message);\r\n        }\r\n        messageBox.className = cssClass;\r\n        this.elements.push(messageBox);\r\n        this.msgBox = messageBox;\r\n        return messageBox;\r\n    }\r\n    getMessageBox() {\r\n        return this.msgBox;\r\n    }\r\n    findInMsgBox(querySelector) {\r\n        if (!querySelector || querySelector === \"\") {\r\n            return null;\r\n        }\r\n        return this.msgBox.querySelector(querySelector);\r\n    }\r\n    appendButton(btnText, btnCaption, callback, isActionw) {\r\n        const button = this.appendTextualDiv(btnText, btnCaption.toLowerCase() + \"button\");\r\n        if (button) {\r\n            button.setAttribute(\"type\", \"1\");\r\n            button.addEventListener(\"click\", () => {\r\n                if (typeof callback === \"function\") {\r\n                    callback(this);\r\n                }\r\n            });\r\n            if (!isActionw) {\r\n                this.elements.push(button);\r\n            }\r\n        }\r\n        return button;\r\n    }\r\n    removeYesBtn() {\r\n        if (this.yesBtn) {\r\n            this.yesBtn.remove();\r\n        }\r\n    }\r\n    removeNoBtn() {\r\n        if (this.noBtn) {\r\n            this.noBtn.remove();\r\n        }\r\n    }\r\n    static closeAlerts() {\r\n        // @ts-ignore\r\n        const alerts = window.states;\r\n        for (let k in alerts) {\r\n            alerts[k].remove();\r\n        }\r\n    }\r\n}\r\nexports.Alert = Alert;\r\n\n\n//# sourceURL=webpack://godevmodewebpack/./scripts/Alert.js?");

/***/ }),

/***/ "./scripts/Elements.js":
/*!*****************************!*\
  !*** ./scripts/Elements.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Elements = void 0;\r\nconst EventListeners_1 = __webpack_require__(/*! ./EventListeners */ \"./scripts/EventListeners.js\");\r\nclass Elements {\r\n    static newButton(options) {\r\n        var _a;\r\n        const btnContainer = Elements.newElement({\r\n            callOnClick: options.callOnClick,\r\n            classes: [\"standard-button\", ...((_a = options.btnClasses) !== null && _a !== void 0 ? _a : [])]\r\n        });\r\n        const btnIcon = Elements.newElement({\r\n            tag: \"i\",\r\n            classes: options.iconClasses || [\"fas\", \"fa-plus-circle\"]\r\n        });\r\n        btnContainer.appendChild(btnIcon);\r\n        if (options.text) {\r\n            const btnText = Elements.newElement({\r\n                classes: [\"add-more-deps-title\"]\r\n            });\r\n            btnText.innerHTML = options.text;\r\n            btnContainer.appendChild(btnText);\r\n        }\r\n        return btnContainer;\r\n    }\r\n    static newInput(options) {\r\n        var _a, _b, _c, _d;\r\n        let addObjects = [];\r\n        const input = Elements.newElement({\r\n            tag: (_a = options.tag) !== null && _a !== void 0 ? _a : \"input\",\r\n            type: (_b = options.type) !== null && _b !== void 0 ? _b : \"input\",\r\n            id: options.name,\r\n            value: options.value,\r\n            disabled: !!options.disabled,\r\n            callOnClick: options.callOnClick,\r\n            classes: [\"regular-input\", ...((_c = options.classes) !== null && _c !== void 0 ? _c : [])]\r\n        });\r\n        const min = options.min;\r\n        if (min) {\r\n            input.setAttribute(\"min\", min);\r\n        }\r\n        const max = options.max;\r\n        if (max) {\r\n            input.setAttribute(\"max\", max);\r\n        }\r\n        const disabled = options.disabled;\r\n        if (disabled) {\r\n            input.setAttribute(\"disabled\", disabled + \"\");\r\n        }\r\n        if (options.prefix) {\r\n            const prefix = Elements.newElement({\r\n                text: options.prefix,\r\n                classes: [\"input-prefix\"]\r\n            });\r\n            addObjects.push(prefix);\r\n            addObjects.push(input);\r\n        }\r\n        else {\r\n            addObjects.push(input);\r\n        }\r\n        input.setAttribute(\"placeholder\", (_d = options.placeholder) !== null && _d !== void 0 ? _d : \"\");\r\n        if (options.label) {\r\n            const label = Elements.newElement({\r\n                text: options.label,\r\n                tag: \"label\",\r\n                classes: [\"input-label\"]\r\n            });\r\n            label.setAttribute(\"for\", input.name);\r\n            addObjects.push(label);\r\n        }\r\n        const error = Elements.newElement({\r\n            classes: [\"input-error\"]\r\n        });\r\n        addObjects.push(error);\r\n        return {\r\n            html: Elements.newElement({\r\n                classes: [\"input-wrapper\"],\r\n                append: addObjects\r\n            }),\r\n            input: input,\r\n            setError: (errorStr) => {\r\n                error.innerHTML = errorStr !== null && errorStr !== void 0 ? errorStr : \"\";\r\n            },\r\n            validation: () => {\r\n                return options.validation ? options.validation(input.value) : () => {\r\n                };\r\n            },\r\n            setInput: (str) => {\r\n                input.value = str !== null && str !== void 0 ? str : \"\";\r\n            },\r\n            clearError: () => {\r\n                error.innerHTML = \"\";\r\n            }\r\n        };\r\n    }\r\n    static newElement(options) {\r\n        var _a, _b, _c, _d, _e, _f, _g;\r\n        const tmpDiv = document.createElement((_a = options.tag) !== null && _a !== void 0 ? _a : \"div\");\r\n        for (let key in options) {\r\n            if (key === \"classes\") {\r\n                const classes = options[key];\r\n                if (Array.isArray(classes)) {\r\n                    for (let cls of classes) {\r\n                        if (cls && cls != \"\") {\r\n                            tmpDiv.classList.add(cls);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    tmpDiv.classList.add(classes);\r\n                }\r\n            }\r\n            if (key === \"text\") {\r\n                if (((_b = options.text) === null || _b === void 0 ? void 0 : _b.includes(\"<d>\")) || ((_c = options.text) === null || _c === void 0 ? void 0 : _c.includes(\"<t>\")) || ((_d = options.text) === null || _d === void 0 ? void 0 : _d.includes(\"<div\")) || ((_e = options.text) === null || _e === void 0 ? void 0 : _e.includes(\"<b\"))) {\r\n                    const tmp = document.createElement(\"div\");\r\n                    tmp.innerHTML = options.text;\r\n                    tmpDiv.appendChild(tmp);\r\n                }\r\n                else {\r\n                    const text = document.createTextNode(options.text);\r\n                    tmpDiv.appendChild(text);\r\n                }\r\n            }\r\n            if (key === \"type\") {\r\n                if (!(tmpDiv instanceof HTMLTextAreaElement)) {\r\n                    tmpDiv.type = options.type;\r\n                }\r\n            }\r\n            if (key === \"target\") {\r\n                if (!(tmpDiv instanceof HTMLTextAreaElement)) {\r\n                    tmpDiv.target = options.target;\r\n                }\r\n            }\r\n            if (key === \"disabled\") {\r\n                tmpDiv.disabled = options.disabled;\r\n            }\r\n            if (key === \"value\") {\r\n                tmpDiv.value = (_f = options.value) !== null && _f !== void 0 ? _f : \"\";\r\n            }\r\n            if (key === \"placeholder\") {\r\n                tmpDiv.placeholder = (_g = options.placeholder) !== null && _g !== void 0 ? _g : \"\";\r\n            }\r\n            if (key === \"name\") {\r\n                tmpDiv.name = options.name;\r\n            }\r\n            if (key === \"title\") {\r\n                tmpDiv.title = options.text;\r\n            }\r\n            if (key === \"max\") {\r\n                if (!(tmpDiv instanceof HTMLTextAreaElement)) {\r\n                    tmpDiv.max = options.max;\r\n                }\r\n            }\r\n            if (key === \"min\") {\r\n                if (!(tmpDiv instanceof HTMLTextAreaElement)) {\r\n                    tmpDiv.min = options.min;\r\n                }\r\n            }\r\n            if (key === \"id\") {\r\n                tmpDiv.id = options.id;\r\n            }\r\n            if (key === \"href\") {\r\n                tmpDiv.href = options.href;\r\n            }\r\n            if (key === \"src\") {\r\n                if (!(tmpDiv instanceof HTMLTextAreaElement)) {\r\n                    tmpDiv.src = options.src;\r\n                }\r\n            }\r\n        }\r\n        if (options.callOnClick) {\r\n            if (Array.isArray(options.callOnClick)) {\r\n                for (let callOnClick of options.callOnClick) {\r\n                    Elements.setClick(callOnClick, tmpDiv);\r\n                }\r\n            }\r\n            else {\r\n                Elements.setClick(options.callOnClick, tmpDiv);\r\n            }\r\n        }\r\n        const appendList = options.append;\r\n        if (appendList && appendList.length > 0) {\r\n            for (let element of appendList) {\r\n                if (element) {\r\n                    tmpDiv.appendChild(element);\r\n                }\r\n            }\r\n        }\r\n        if (options.attachTo) {\r\n            options.attachTo.appendChild(tmpDiv);\r\n        }\r\n        return tmpDiv;\r\n    }\r\n    static setClick(eventParams, element) {\r\n        var _a, _b;\r\n        EventListeners_1.EventListeners.unlisten(eventParams.callFnName);\r\n        EventListeners_1.EventListeners.groupListeners(eventParams.callFnName, [\r\n            {\r\n                type: (_a = eventParams.callType) !== null && _a !== void 0 ? _a : \"click\",\r\n                context: this,\r\n                callback: (e) => {\r\n                    const fn = eventParams.fn;\r\n                    if (fn && typeof fn === \"function\") {\r\n                        fn(element, e);\r\n                    }\r\n                },\r\n                debounce: (_b = eventParams.callDebounce) !== null && _b !== void 0 ? _b : 10,\r\n                element: element\r\n            }\r\n        ]);\r\n    }\r\n}\r\nexports.Elements = Elements;\r\n\n\n//# sourceURL=webpack://godevmodewebpack/./scripts/Elements.js?");

/***/ }),

/***/ "./scripts/EventListeners.js":
/*!***********************************!*\
  !*** ./scripts/EventListeners.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.EventListeners = void 0;\r\nclass EventListeners {\r\n    static add(options, ret) {\r\n        const element = options.element;\r\n        if (!element) {\r\n            return;\r\n        }\r\n        // const callbackFn = <() => void | C>options.callback.bind(options.context);\r\n        const callbackFn = options.callback;\r\n        const eventData = {\r\n            type: options.type,\r\n            callbackFn: callbackFn,\r\n            element: options.element\r\n        };\r\n        if (options.debounce) {\r\n            const debounce = EventListeners.debounce(callbackFn, options.debounce, options.context);\r\n            element.addEventListener(options.type, debounce);\r\n            return;\r\n        }\r\n        element.addEventListener(options.type, callbackFn);\r\n        if (ret) {\r\n            return eventData;\r\n        }\r\n        EventListeners.listeners[options.id] = [eventData];\r\n    }\r\n    static pushToTet(data) {\r\n        EventListeners.test.push(data);\r\n    }\r\n    static debounce(func, delay, context) {\r\n        let timeoutId = null;\r\n        let isCooldown = false;\r\n        return function (...args) {\r\n            const context = this;\r\n            if (!isCooldown) {\r\n                // @ts-ignore\r\n                func.apply(context, args);\r\n                isCooldown = true;\r\n                timeoutId = setTimeout(() => {\r\n                    isCooldown = false;\r\n                    if (timeoutId !== null) {\r\n                        clearTimeout(timeoutId);\r\n                        timeoutId = null;\r\n                    }\r\n                }, delay);\r\n            }\r\n        };\r\n    }\r\n    static getTests() {\r\n        return EventListeners.test;\r\n    }\r\n    static showStatus() {\r\n        return EventListeners.listeners;\r\n    }\r\n    static unlisten(id) {\r\n        const optionsList = EventListeners.listeners[id];\r\n        if (!optionsList || optionsList.length === 0) {\r\n            return;\r\n        }\r\n        optionsList.forEach((option) => {\r\n            if (option) {\r\n                const element = option.element;\r\n                if (!element) {\r\n                    return;\r\n                }\r\n                element.removeEventListener(option.type, option.callbackFn);\r\n            }\r\n        });\r\n    }\r\n    static unlistenNamespace(id) {\r\n        const namespace = EventListeners.groupOfIds;\r\n        if (namespace) {\r\n            const ids = namespace[id];\r\n            if (ids && ids.length > 0) {\r\n                ids.forEach((unlistenId) => {\r\n                    EventListeners.unlisten(unlistenId);\r\n                });\r\n            }\r\n        }\r\n    }\r\n    static groupListeners(groupId, optionsList) {\r\n        if (!optionsList || optionsList.length === 0) {\r\n            return;\r\n        }\r\n        if (groupId.includes(\"-\")) {\r\n            const groupNamespace = groupId.split(\"-\");\r\n            EventListeners.groupOfIds[groupNamespace[0]].push(groupId);\r\n        }\r\n        EventListeners.listeners[groupId] = [];\r\n        let temp = [];\r\n        optionsList.forEach((listenerItem) => {\r\n            temp.push(EventListeners.add(listenerItem, true));\r\n        });\r\n        EventListeners.listeners[groupId] = temp;\r\n    }\r\n}\r\nexports.EventListeners = EventListeners;\r\nEventListeners.test = [];\r\nEventListeners.groupOfIds = {};\r\nEventListeners.listeners = {};\r\nEventListeners.trackables = {};\r\n\n\n//# sourceURL=webpack://godevmodewebpack/./scripts/EventListeners.js?");

/***/ }),

/***/ "./scripts/Fetcher.js":
/*!****************************!*\
  !*** ./scripts/Fetcher.js ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Fetcher = void 0;\r\nconst Alert_1 = __webpack_require__(/*! ./Alert */ \"./scripts/Alert.js\");\r\nclass Fetcher {\r\n    static makeGetFetch(url, loadingMs) {\r\n        let spinner;\r\n        if (loadingMs) {\r\n            spinner = new Alert_1.Alert({\r\n                type: 2,\r\n                message: loadingMs\r\n            });\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            fetch(url)\r\n                .then(response => {\r\n                if (!response) {\r\n                    reject(null);\r\n                }\r\n                if (spinner) {\r\n                    spinner.remove();\r\n                }\r\n                return response.json();\r\n            })\r\n                .then((parsedData) => {\r\n                resolve(parsedData);\r\n            })\r\n                .catch(error => {\r\n                if (spinner) {\r\n                    spinner.remove();\r\n                }\r\n                reject(null);\r\n            });\r\n        });\r\n    }\r\n    static makePostFetch(configs) {\r\n        let spinner;\r\n        if (configs.spinnerMsg) {\r\n            spinner = new Alert_1.Alert({\r\n                type: 2,\r\n                message: configs.spinnerMsg\r\n            });\r\n        }\r\n        let options = {\r\n            'method': configs.method || 'POST',\r\n            'headers': {\r\n                'content-type': \"application/json\"\r\n            },\r\n            body: JSON.stringify(configs.data)\r\n        };\r\n        return new Promise((resolve, reject) => {\r\n            fetch(configs.url, options)\r\n                .then(response => {\r\n                if (!response) {\r\n                    console.log(\"Network response was not ok\");\r\n                    reject(null);\r\n                }\r\n                if (spinner) {\r\n                    spinner.remove();\r\n                }\r\n                return response.json();\r\n            })\r\n                .then((parsedData) => {\r\n                resolve(parsedData);\r\n            })\r\n                .catch(error => {\r\n                if (spinner) {\r\n                    spinner.remove();\r\n                }\r\n                reject(null);\r\n            });\r\n        });\r\n    }\r\n}\r\nexports.Fetcher = Fetcher;\r\n\n\n//# sourceURL=webpack://godevmodewebpack/./scripts/Fetcher.js?");

/***/ }),

/***/ "./scripts/Main.js":
/*!*************************!*\
  !*** ./scripts/Main.js ***!
  \*************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/**\r\n * Designed by Ilya Nikulin 2020\r\n * This is a template for creating Node Express + TypesScript + Jest applications.\r\n * You may extend it with your own configs or use it as is.\r\n * All the required paths and ports are stored within .env.dev/.env.prod files.\r\n * You may add arguments to npm start dev/prod http/https script via command line.\r\n * These arguments are for server tuning purposes.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n__webpack_require__(/*! ../sass/main.scss */ \"./sass/main.scss\");\r\nconst Sockets_1 = __webpack_require__(/*! ./Sockets */ \"./scripts/Sockets.js\");\r\nconst Alert_1 = __webpack_require__(/*! ./Alert */ \"./scripts/Alert.js\");\r\nconst NodesExample_1 = __webpack_require__(/*! ./components/NodesExample */ \"./scripts/components/NodesExample.js\");\r\n// @ts-ignore\r\nwindow.Alert = Alert_1.Alert;\r\n// @ts-ignore\r\nwindow.Sockets = Sockets_1.Sockets;\r\n// @ts-ignore\r\nwindow.NodesExample = NodesExample_1.NodesExample;\r\n\n\n//# sourceURL=webpack://godevmodewebpack/./scripts/Main.js?");

/***/ }),

/***/ "./scripts/Sockets.js":
/*!****************************!*\
  !*** ./scripts/Sockets.js ***!
  \****************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Sockets = void 0;\r\nclass Sockets {\r\n    constructor() {\r\n        this.socket = io(\"http://localhost:3025\", {\r\n            transports: [\r\n                'websocket'\r\n            ]\r\n        });\r\n    }\r\n    emit(id, data) {\r\n        this.socket.emit(id, data);\r\n    }\r\n    on(id, callback) {\r\n        this.socket.on(id, (data) => {\r\n            callback(data);\r\n        });\r\n    }\r\n}\r\nexports.Sockets = Sockets;\r\n\n\n//# sourceURL=webpack://godevmodewebpack/./scripts/Sockets.js?");

/***/ }),

/***/ "./scripts/Tools.js":
/*!**************************!*\
  !*** ./scripts/Tools.js ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Tools = void 0;\r\nconst Alert_1 = __webpack_require__(/*! ./Alert */ \"./scripts/Alert.js\");\r\nconst Fetcher_1 = __webpack_require__(/*! ./Fetcher */ \"./scripts/Fetcher.js\");\r\nconst Translations_1 = __webpack_require__(/*! ./Translations */ \"./scripts/Translations.js\");\r\nclass Tools {\r\n    static formatDate(originalDate) {\r\n        const year = originalDate.getFullYear();\r\n        const month = String(originalDate.getMonth() + 1).padStart(2, '0'); // Adding 1 because month index starts from 0\r\n        const day = String(originalDate.getDate()).padStart(2, '0');\r\n        const hours = String(originalDate.getHours()).padStart(2, '0');\r\n        const minutes = String(originalDate.getMinutes()).padStart(2, '0');\r\n        const seconds = String(\"00\").padStart(2, '0');\r\n        const formattedDate = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r\n        return formattedDate;\r\n    }\r\n    static createDiv(options) {\r\n        var _a, _b;\r\n        const tmpDiv = document.createElement((_a = options.tag) !== null && _a !== void 0 ? _a : \"div\");\r\n        for (let key in options) {\r\n            if (key === \"classes\") {\r\n                const classes = options[key];\r\n                if (Array.isArray(classes)) {\r\n                    for (let cls of classes) {\r\n                        if (cls && cls != \"\") {\r\n                            tmpDiv.classList.add(cls);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    tmpDiv.classList.add(classes);\r\n                }\r\n            }\r\n            if (key === \"text\") {\r\n                const text = document.createTextNode(options.text);\r\n                tmpDiv.appendChild(text);\r\n            }\r\n            if (key === \"type\") {\r\n                tmpDiv.type = options.type;\r\n            }\r\n            if (key === \"value\") {\r\n                tmpDiv.value = (_b = options.value) !== null && _b !== void 0 ? _b : \"\";\r\n            }\r\n            if (key === \"disabled\" && options.disabled) {\r\n                tmpDiv.setAttribute(\"disabled\", \"true\");\r\n            }\r\n            if (key === \"name\") {\r\n                tmpDiv.name = options.name;\r\n            }\r\n            if (key === \"title\") {\r\n                tmpDiv.title = options.text;\r\n            }\r\n            if (key === \"id\") {\r\n                tmpDiv.id = options.id;\r\n            }\r\n            if (key === \"src\") {\r\n                tmpDiv.src = options.src;\r\n            }\r\n        }\r\n        return tmpDiv;\r\n    }\r\n    static calcChecksum(str) {\r\n        let hash = 5381;\r\n        for (let i = 0; i < str.length; i++) {\r\n            hash = (hash * 33) ^ str.charCodeAt(i);\r\n        }\r\n        const newhash = hash >>> 0;\r\n        const checksum = newhash % 10000;\r\n        return checksum.toString().padStart(5, '0');\r\n    }\r\n    static findItemInArray(sourceArray, key, equals) {\r\n        var _a;\r\n        if (!sourceArray) {\r\n            return null;\r\n        }\r\n        return (_a = sourceArray.find((item) => item[key] === equals)) !== null && _a !== void 0 ? _a : null;\r\n    }\r\n    static toIndexedObj(obj, index) {\r\n        if (!obj || obj.length === 0) {\r\n            return null;\r\n        }\r\n        const temp = {};\r\n        obj.forEach((item) => {\r\n            // @ts-ignore\r\n            temp[item[index]] = item;\r\n        });\r\n        return temp;\r\n    }\r\n    static searchRecord(searchPath, searchStr) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!searchPath || !searchStr || searchStr.length < 3) {\r\n                return null;\r\n            }\r\n            return yield Fetcher_1.Fetcher.makeGetFetch(searchPath + \"/\" + searchStr);\r\n        });\r\n    }\r\n    static errorPopupBox() {\r\n        const translationsG = Translations_1.Translations.get(\"general\");\r\n        new Alert_1.Alert({\r\n            type: 1,\r\n            title: translationsG.networkErrorTitle,\r\n            message: translationsG.networkErrorDsc,\r\n            animationStyle: \"fadeIn\",\r\n            callbackBtnYesText: translationsG.approveTitle,\r\n            callbackYes: (innerModal) => {\r\n                innerModal === null || innerModal === void 0 ? void 0 : innerModal.remove();\r\n            }\r\n        });\r\n    }\r\n    static dataErrorPopupBox() {\r\n        const translationsG = Translations_1.Translations.get(\"general\");\r\n        new Alert_1.Alert({\r\n            type: 1,\r\n            title: translationsG.errorDataReq,\r\n            message: translationsG.errorDataReqDsc,\r\n            animationStyle: \"fadeIn\",\r\n            callbackBtnYesText: translationsG.approveTitle,\r\n            callbackYes: (innerModal) => {\r\n                innerModal === null || innerModal === void 0 ? void 0 : innerModal.remove();\r\n            }\r\n        });\r\n    }\r\n    static unsusccessActionPopupBox() {\r\n        const translationsG = Translations_1.Translations.get(\"general\");\r\n        new Alert_1.Alert({\r\n            type: 1,\r\n            title: translationsG.errorActionReq,\r\n            message: translationsG.errorActionReqDsc,\r\n            animationStyle: \"fadeIn\",\r\n            callbackBtnYesText: translationsG.approveTitle,\r\n            callbackYes: (innerModal) => {\r\n                innerModal === null || innerModal === void 0 ? void 0 : innerModal.remove();\r\n            }\r\n        });\r\n    }\r\n    static objectLength(object) {\r\n        if (!object) {\r\n            return 0;\r\n        }\r\n        return Object.keys(object).length;\r\n    }\r\n    static approveActionPopupBox(options) {\r\n        const translationsG = Translations_1.Translations.get(\"general\");\r\n        new Alert_1.Alert({\r\n            type: 1,\r\n            title: translationsG.approveActionTitle,\r\n            message: options.msg ? options.msg : translationsG.approveActionDsc,\r\n            animationStyle: \"fadeIn\",\r\n            callbackBtnYesText: options.yesBtn ? options.yesBtn : translationsG.approveTitle,\r\n            callbackBtnNoText: translationsG.cancelTitle,\r\n            callbackYes: (innerModal) => {\r\n                const okFn = options.okFn;\r\n                if (okFn && typeof okFn === \"function\") {\r\n                    okFn(innerModal);\r\n                    return;\r\n                }\r\n                innerModal === null || innerModal === void 0 ? void 0 : innerModal.remove();\r\n            },\r\n            callbackNo: (innerModal) => {\r\n                const notOkFn = options.notOkFn;\r\n                if (notOkFn && typeof notOkFn === \"function\") {\r\n                    notOkFn(innerModal);\r\n                    return;\r\n                }\r\n                innerModal === null || innerModal === void 0 ? void 0 : innerModal.remove();\r\n            }\r\n        });\r\n    }\r\n    static popupBox(title, msg, okFn) {\r\n        if (!title || !msg) {\r\n            return;\r\n        }\r\n        const translationsG = Translations_1.Translations.get(\"general\");\r\n        new Alert_1.Alert({\r\n            type: 1,\r\n            title: title,\r\n            message: msg,\r\n            animationStyle: \"fadeIn\",\r\n            callbackBtnYesText: translationsG.approveTitle,\r\n            callbackYes: (innerModal) => {\r\n                innerModal === null || innerModal === void 0 ? void 0 : innerModal.remove();\r\n                if (okFn && typeof okFn === \"function\") {\r\n                    okFn();\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static pushUniqueObject(array, object, key) {\r\n        const exists = array.some(item => item[key] === object[key]);\r\n        if (!exists) {\r\n            array.push(object);\r\n        }\r\n        return array;\r\n    }\r\n    static dragScroll(elementClass) {\r\n        let isMouseDown = false;\r\n        let startX, scrollLeft;\r\n        const container = typeof elementClass === \"string\" ? document.querySelector(elementClass) : elementClass;\r\n        if (!container) {\r\n            return;\r\n        }\r\n        container.addEventListener('mousedown', (e) => {\r\n            isMouseDown = true;\r\n            startX = e.pageX - container.offsetLeft;\r\n            scrollLeft = container.scrollLeft;\r\n            container.style.cursor = 'grabbing';\r\n        });\r\n        container.addEventListener('mousemove', (e) => {\r\n            if (!isMouseDown)\r\n                return;\r\n            e.preventDefault();\r\n            const x = e.pageX - container.offsetLeft;\r\n            const walk = (x - startX) * 2;\r\n            container.scrollLeft = scrollLeft - walk;\r\n        });\r\n        container.addEventListener('mouseup', () => {\r\n            isMouseDown = false;\r\n            container.style.cursor = 'grab';\r\n        });\r\n    }\r\n    static drillNestedValues(tableDataRow, drillDots, index, len) {\r\n        if (index === len) {\r\n            // Return the value found at the last nested property\r\n            return tableDataRow;\r\n        }\r\n        // Check if the current key exists in the object\r\n        if (tableDataRow.hasOwnProperty(drillDots[index])) {\r\n            // If it exists, recursively call drillNestedValues with the nested object and next index\r\n            return this.drillNestedValues(tableDataRow[drillDots[index]], drillDots, index + 1, len);\r\n        }\r\n        else {\r\n            // If the key doesn't exist, return undefined (or handle error as needed)\r\n            return undefined;\r\n        }\r\n    }\r\n    static createNestedJson(keys, value) {\r\n        const obj = {};\r\n        const parts = keys.split('.');\r\n        const assignValue = (obj, parts, value) => {\r\n            const currentKey = parts.shift();\r\n            if (parts.length === 0) {\r\n                obj[currentKey] = value;\r\n            }\r\n            else {\r\n                obj[currentKey] = obj[currentKey] || {};\r\n                assignValue(obj[currentKey], parts, value);\r\n            }\r\n        };\r\n        assignValue(obj, parts, value);\r\n        return obj;\r\n    }\r\n    static isDefinedString(str) {\r\n        return str !== null && str !== undefined && str !== \"\";\r\n    }\r\n}\r\nexports.Tools = Tools;\r\n\n\n//# sourceURL=webpack://godevmodewebpack/./scripts/Tools.js?");

/***/ }),

/***/ "./scripts/Translations.js":
/*!*********************************!*\
  !*** ./scripts/Translations.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Translations = void 0;\r\nclass Translations {\r\n    static get(index) {\r\n        const storage = localStorage.getItem(\"translations\");\r\n        if (storage && storage !== \"\") {\r\n            try {\r\n                return JSON.parse(storage)[index];\r\n            }\r\n            catch (e) {\r\n                return \"\";\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n}\r\nexports.Translations = Translations;\r\n\n\n//# sourceURL=webpack://godevmodewebpack/./scripts/Translations.js?");

/***/ }),

/***/ "./scripts/components/ActionWindow.js":
/*!********************************************!*\
  !*** ./scripts/components/ActionWindow.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n};\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar _ActionWindow_translationsG;\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ActionWindow = void 0;\r\nconst Alert_1 = __webpack_require__(/*! ../Alert */ \"./scripts/Alert.js\");\r\nconst Tools_1 = __webpack_require__(/*! ../Tools */ \"./scripts/Tools.js\");\r\nconst Translations_1 = __webpack_require__(/*! ../Translations */ \"./scripts/Translations.js\");\r\nconst EventListeners_1 = __webpack_require__(/*! ../EventListeners */ \"./scripts/EventListeners.js\");\r\nconst Elements_1 = __webpack_require__(/*! ../Elements */ \"./scripts/Elements.js\");\r\nclass ActionWindow {\r\n    constructor(configs) {\r\n        var _a, _b, _c, _d, _e;\r\n        _ActionWindow_translationsG.set(this, void 0);\r\n        this.msgBoxElements = {\r\n            title: null,\r\n            msgContainer: null,\r\n            actionBtnsCntr: null,\r\n            searchBoxCntr: null,\r\n            resultsBoxCntr: null\r\n        };\r\n        this.configs = configs;\r\n        __classPrivateFieldSet(this, _ActionWindow_translationsG, Translations_1.Translations.get(\"general\"), \"f\");\r\n        this.alertPopup = new Alert_1.Alert({\r\n            type: 1,\r\n            title: (_a = configs.title) !== null && _a !== void 0 ? _a : \"\",\r\n            message: this.createMsgBox(),\r\n            animationStyle: (_b = configs.animationStyle) !== null && _b !== void 0 ? _b : \"fadeIn\",\r\n            parentClass: (_c = configs.parentClass) !== null && _c !== void 0 ? _c : \"manager-window-modal\",\r\n            context: configs.context,\r\n            callbackBtnYesText: (_d = configs.callbackBtnYesText) !== null && _d !== void 0 ? _d : __classPrivateFieldGet(this, _ActionWindow_translationsG, \"f\").approveTitle,\r\n            callbackBtnNoText: (_e = configs.callbackBtnNoText) !== null && _e !== void 0 ? _e : __classPrivateFieldGet(this, _ActionWindow_translationsG, \"f\").cancelTitle,\r\n        }, (modal, msgBox) => {\r\n        });\r\n    }\r\n    createMsgBox() {\r\n        const configs = this.configs;\r\n        const msgBoxElements = this.msgBoxElements;\r\n        const msgContainer = Tools_1.Tools.createDiv({\r\n            classes: [\"action-window-message-box\"]\r\n        });\r\n        const title = Tools_1.Tools.createDiv({\r\n            classes: [\"action-window-msgbox-title\"]\r\n        });\r\n        if (configs.msgBoxTitle) {\r\n            title.innerHTML = configs.msgBoxTitle;\r\n        }\r\n        const actionBtnsCntr = Tools_1.Tools.createDiv({\r\n            classes: [\"action-window-msgbox-buttons\"]\r\n        });\r\n        const searchBoxCntr = Tools_1.Tools.createDiv({\r\n            classes: [\"action-window-msgbox-search\"]\r\n        });\r\n        const resultsBoxCntr = Tools_1.Tools.createDiv({\r\n            classes: [\"action-window-msgbox-results\"]\r\n        });\r\n        msgContainer.appendChild(title);\r\n        msgContainer.appendChild(actionBtnsCntr);\r\n        msgContainer.appendChild(actionBtnsCntr);\r\n        msgContainer.appendChild(searchBoxCntr);\r\n        msgContainer.appendChild(resultsBoxCntr);\r\n        msgBoxElements.msgContainer = msgContainer;\r\n        msgBoxElements.title = title;\r\n        msgBoxElements.actionBtnsCntr = actionBtnsCntr;\r\n        msgBoxElements.searchBoxCntr = searchBoxCntr;\r\n        msgBoxElements.resultsBoxCntr = resultsBoxCntr;\r\n        this.msgBoxElements = msgBoxElements;\r\n        return msgContainer;\r\n    }\r\n    addCloseX(callFn) {\r\n        const closeIcon = Tools_1.Tools.createDiv({\r\n            classes: [\"close\", \"fas\", \"fa-times\"]\r\n        });\r\n        EventListeners_1.EventListeners.groupListeners(\"closeCandidateViewer\", [\r\n            {\r\n                type: \"click\",\r\n                context: this,\r\n                callback: () => {\r\n                    EventListeners_1.EventListeners.unlisten(\"closeCandidateViewer\");\r\n                    if (callFn && typeof callFn === \"function\") {\r\n                        callFn();\r\n                    }\r\n                    this.alertPopup.remove();\r\n                },\r\n                debounce: 1000,\r\n                element: closeIcon\r\n            }\r\n        ]);\r\n        this.alertPopup.getTitle().appendChild(closeIcon);\r\n        return this;\r\n    }\r\n    addSaveBtnToTitle(fn, saveText) {\r\n        const btnText = saveText !== null && saveText !== void 0 ? saveText : __classPrivateFieldGet(this, _ActionWindow_translationsG, \"f\").approveTitle;\r\n        const closeIcon = Elements_1.Elements.newButton({\r\n            text: btnText,\r\n            iconClasses: [\"fa-solid\", \"fa-circle-check\"],\r\n            btnClasses: [\"center\"],\r\n            callOnClick: {\r\n                callDebounce: 2000,\r\n                callFnName: \"addSaveBtnToTitle\",\r\n                fn: () => {\r\n                    if (fn && typeof fn === \"function\") {\r\n                        fn();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        this.alertPopup.getTitle().appendChild(closeIcon);\r\n        return this;\r\n    }\r\n    setCallbackYes(fn) {\r\n        return this.setCallback(fn, 1);\r\n    }\r\n    setCallbackNo(fn) {\r\n        return this.setCallback(fn, 0);\r\n    }\r\n    removeYesBtn() {\r\n        this.alertPopup.removeYesBtn();\r\n        return this;\r\n    }\r\n    removeNoBtn() {\r\n        this.alertPopup.removeNoBtn();\r\n        return this;\r\n    }\r\n    setCallback(fn, type) {\r\n        if (!fn || typeof fn !== \"function\") {\r\n            return this;\r\n        }\r\n        this.alertPopup.setCallback(fn, type);\r\n        return this;\r\n    }\r\n    setTitleText(text) {\r\n        this.msgBoxElements.title.innerHTML = text !== null && text !== void 0 ? text : \"\";\r\n    }\r\n    setModalTitleText(text) {\r\n        this.alertPopup.setTitleText(text !== null && text !== void 0 ? text : \"\");\r\n    }\r\n    msgBoxTitleAppend(htmlNode) {\r\n        this.msgBoxElements.title.appendChild(htmlNode);\r\n    }\r\n    close() {\r\n        this.alertPopup.remove();\r\n    }\r\n    searchElement() {\r\n        return this.msgBoxElements.searchBoxCntr;\r\n    }\r\n    removeSearchBoxCntr() {\r\n        var _a;\r\n        (_a = this.msgBoxElements.searchBoxCntr) === null || _a === void 0 ? void 0 : _a.remove();\r\n        return this;\r\n    }\r\n    removeActionBtnsCntr() {\r\n        var _a;\r\n        (_a = this.msgBoxElements.actionBtnsCntr) === null || _a === void 0 ? void 0 : _a.remove();\r\n        return this;\r\n    }\r\n    removeResultsElement() {\r\n        var _a;\r\n        (_a = this.msgBoxElements.resultsBoxCntr) === null || _a === void 0 ? void 0 : _a.remove();\r\n        return this;\r\n    }\r\n    resultsElement() {\r\n        return this.msgBoxElements.resultsBoxCntr;\r\n    }\r\n    resultsSectionAppend(itemtoAttach) {\r\n        var _a;\r\n        const boxElements = this.msgBoxElements;\r\n        if (!boxElements || !itemtoAttach) {\r\n            return;\r\n        }\r\n        (_a = boxElements.resultsBoxCntr) === null || _a === void 0 ? void 0 : _a.appendChild(itemtoAttach);\r\n    }\r\n    appendToSearchEl(itemtoAttach) {\r\n        var _a;\r\n        const boxElements = this.msgBoxElements;\r\n        if (!boxElements || !itemtoAttach) {\r\n            return;\r\n        }\r\n        (_a = boxElements.searchBoxCntr) === null || _a === void 0 ? void 0 : _a.appendChild(itemtoAttach);\r\n    }\r\n    appendToActionBtns(itemtoAttach) {\r\n        var _a;\r\n        const boxElements = this.msgBoxElements;\r\n        if (!boxElements || !itemtoAttach) {\r\n            return;\r\n        }\r\n        (_a = boxElements.actionBtnsCntr) === null || _a === void 0 ? void 0 : _a.appendChild(itemtoAttach);\r\n    }\r\n}\r\nexports.ActionWindow = ActionWindow;\r\n_ActionWindow_translationsG = new WeakMap();\r\n\n\n//# sourceURL=webpack://godevmodewebpack/./scripts/components/ActionWindow.js?");

/***/ }),

/***/ "./scripts/components/NodesExample.js":
/*!********************************************!*\
  !*** ./scripts/components/NodesExample.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n};\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar _NodesExample_parentNode, _NodesExample_treesListResultsCls, _NodesExample_nodesResults, _NodesExample_treesList, _NodesExample_transl;\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.NodesExample = void 0;\r\nconst Fetcher_1 = __webpack_require__(/*! ../Fetcher */ \"./scripts/Fetcher.js\");\r\nconst Translations_1 = __webpack_require__(/*! ../Translations */ \"./scripts/Translations.js\");\r\nconst Tools_1 = __webpack_require__(/*! ../Tools */ \"./scripts/Tools.js\");\r\nconst Elements_1 = __webpack_require__(/*! ../Elements */ \"./scripts/Elements.js\");\r\nconst ActionWindow_1 = __webpack_require__(/*! ../components/ActionWindow */ \"./scripts/components/ActionWindow.js\");\r\nclass NodesExample {\r\n    constructor(parnetCls, treesListResultsCls, nodesResultsCls) {\r\n        var _a;\r\n        _NodesExample_parentNode.set(this, void 0);\r\n        _NodesExample_treesListResultsCls.set(this, void 0);\r\n        _NodesExample_nodesResults.set(this, void 0);\r\n        _NodesExample_treesList.set(this, {});\r\n        _NodesExample_transl.set(this, void 0);\r\n        __classPrivateFieldSet(this, _NodesExample_parentNode, document.querySelector(parnetCls), \"f\");\r\n        __classPrivateFieldSet(this, _NodesExample_treesListResultsCls, document.querySelector(treesListResultsCls), \"f\");\r\n        __classPrivateFieldSet(this, _NodesExample_nodesResults, document.querySelector(nodesResultsCls), \"f\");\r\n        __classPrivateFieldSet(this, _NodesExample_transl, Translations_1.Translations.get(\"example\"), \"f\");\r\n        this.fetchTree(\"FirstTree\");\r\n        __classPrivateFieldSet(this, _NodesExample_treesList, JSON.parse((_a = localStorage.getItem(\"myTrees\")) !== null && _a !== void 0 ? _a : \"{}\"), \"f\");\r\n        if (__classPrivateFieldGet(this, _NodesExample_treesListResultsCls, \"f\")) {\r\n            for (let key in __classPrivateFieldGet(this, _NodesExample_treesList, \"f\")) {\r\n                const tree = __classPrivateFieldGet(this, _NodesExample_treesList, \"f\")[key];\r\n                this.appendTreeToList(tree);\r\n            }\r\n        }\r\n        this.createNewTreeCmp(\".buttons-container\");\r\n    }\r\n    appendTreeToList(tree) {\r\n        __classPrivateFieldGet(this, _NodesExample_treesListResultsCls, \"f\").appendChild(Elements_1.Elements.newElement({\r\n            text: \"<div><i class=\\\"fa-solid fa-share-nodes\\\"></i> </div>\" + tree.name,\r\n            classes: [\"tree-item\"],\r\n            callOnClick: {\r\n                fn: () => __awaiter(this, void 0, void 0, function* () {\r\n                    yield this.reloadTree(tree.id, tree.name);\r\n                }),\r\n                callType: \"click\",\r\n                callDebounce: 1000,\r\n                callFnName: \"getTree\"\r\n            }\r\n        }));\r\n    }\r\n    createNewTreeCmp(containerCls) {\r\n        const btnAppender = __classPrivateFieldGet(this, _NodesExample_parentNode, \"f\").querySelector(containerCls);\r\n        btnAppender.appendChild(Elements_1.Elements.newButton({\r\n            text: __classPrivateFieldGet(this, _NodesExample_transl, \"f\").createNewTree,\r\n            btnClasses: [\"attach-candidats-btn\", \"center\", \"red\"],\r\n            iconClasses: [\"fas\", \"fa-file-download\"],\r\n            callOnClick: {\r\n                callType: \"click\",\r\n                callDebounce: 1000,\r\n                callFnName: \"createNewNode\",\r\n                fn: () => {\r\n                    this.createTree();\r\n                }\r\n            }\r\n        }));\r\n    }\r\n    createNode(nodeId, nodeName, treeId, treeName) {\r\n        let nodeNameValue = \"\";\r\n        const nodeNameInput = Elements_1.Elements.newInput({\r\n            name: \"node-name\",\r\n            placeholder: __classPrivateFieldGet(this, _NodesExample_transl, \"f\").enterNodeName,\r\n            classes: [\"collection-name\"],\r\n            prefix: __classPrivateFieldGet(this, _NodesExample_transl, \"f\").enterNodeName,\r\n            callOnClick: {\r\n                callType: \"input\",\r\n                callFnName: \"createnewnode\",\r\n                fn: (input) => {\r\n                    nodeNameValue = input.value;\r\n                    if (nodeNameValue !== \"\") {\r\n                        nodeNameInput.clearError();\r\n                    }\r\n                    else {\r\n                        nodeNameInput.setError(__classPrivateFieldGet(this, _NodesExample_transl, \"f\").errEmptyNodeName);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        const fCWindow = new ActionWindow_1.ActionWindow({\r\n            context: this,\r\n            title: __classPrivateFieldGet(this, _NodesExample_transl, \"f\").newNodeTitle,\r\n            parentClass: \"get-hours-report-window\",\r\n            callbackBtnYesText: __classPrivateFieldGet(this, _NodesExample_transl, \"f\").saveAndExit\r\n        }).removeNoBtn().addCloseX().setCallbackYes(() => {\r\n            if (nodeNameValue !== \"\") {\r\n                nodeNameInput.clearError();\r\n                Fetcher_1.Fetcher.makePostFetch({\r\n                    url: `/createNodeInTree/${treeName}/${nodeId}/${nodeNameValue}`,\r\n                    data: { nodeNameValue, parentNodeId: nodeId, treeName: treeName },\r\n                    method: \"POST\",\r\n                    spinnerMsg: __classPrivateFieldGet(this, _NodesExample_transl, \"f\").gettingTreeSpinner\r\n                }).then((tree) => __awaiter(this, void 0, void 0, function* () {\r\n                    if (tree && tree.data && tree.data.message) {\r\n                        Tools_1.Tools.popupBox(__classPrivateFieldGet(this, _NodesExample_transl, \"f\").message + \" \" + tree.id, __classPrivateFieldGet(this, _NodesExample_transl, \"f\")[tree.data.message.toLowerCase().replace(/[\\'\\s]/g, '')]);\r\n                        return;\r\n                    }\r\n                    yield this.reloadTree(treeId, treeName);\r\n                    fCWindow.close();\r\n                })).catch((er) => {\r\n                    Tools_1.Tools.popupBox(__classPrivateFieldGet(this, _NodesExample_transl, \"f\").reqErrTitle, __classPrivateFieldGet(this, _NodesExample_transl, \"f\").reqErrTitle);\r\n                });\r\n            }\r\n            else {\r\n                nodeNameInput.setError(__classPrivateFieldGet(this, _NodesExample_transl, \"f\").errEmptyNodeName);\r\n            }\r\n        });\r\n        const appender = fCWindow.resultsElement();\r\n        appender.appendChild(nodeNameInput.html);\r\n    }\r\n    renameNode(nodeId, nodeName, treeId, treeName) {\r\n        let nodeNameValue = nodeName !== null && nodeName !== void 0 ? nodeName : \"\";\r\n        const nodeNameInput = Elements_1.Elements.newInput({\r\n            name: \"node-name\",\r\n            placeholder: __classPrivateFieldGet(this, _NodesExample_transl, \"f\").enterNodeName,\r\n            classes: [\"collection-name\"],\r\n            prefix: __classPrivateFieldGet(this, _NodesExample_transl, \"f\").enterNodeName,\r\n            value: nodeName,\r\n            callOnClick: {\r\n                callType: \"input\",\r\n                callFnName: \"renamenode\",\r\n                fn: (input) => {\r\n                    nodeNameValue = input.value;\r\n                    if (nodeNameValue !== \"\") {\r\n                        nodeNameInput.clearError();\r\n                    }\r\n                    else {\r\n                        nodeNameInput.setError(__classPrivateFieldGet(this, _NodesExample_transl, \"f\").errEmptyNodeName);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        const fCWindow = new ActionWindow_1.ActionWindow({\r\n            context: this,\r\n            title: __classPrivateFieldGet(this, _NodesExample_transl, \"f\").renameNodeTitle,\r\n            parentClass: \"get-hours-report-window\",\r\n            callbackBtnYesText: __classPrivateFieldGet(this, _NodesExample_transl, \"f\").saveAndExit\r\n        }).removeNoBtn().addCloseX().setCallbackYes(() => {\r\n            if (nodeNameValue !== \"\") {\r\n                nodeNameInput.clearError();\r\n                Fetcher_1.Fetcher.makePostFetch({\r\n                    url: `/renameNodeInTree/${treeName}/${nodeId}/${nodeNameValue}`,\r\n                    data: { nodeNameValue, parentNodeId: nodeId, treeName: treeName },\r\n                    method: \"POST\",\r\n                    spinnerMsg: __classPrivateFieldGet(this, _NodesExample_transl, \"f\").gettingTreeSpinner\r\n                }).then((tree) => __awaiter(this, void 0, void 0, function* () {\r\n                    if (tree && tree.data && tree.data.message) {\r\n                        Tools_1.Tools.popupBox(__classPrivateFieldGet(this, _NodesExample_transl, \"f\").message + \" \" + tree.id, __classPrivateFieldGet(this, _NodesExample_transl, \"f\")[tree.data.message.toLowerCase().replace(/[\\'\\s]/g, '')]);\r\n                        return;\r\n                    }\r\n                    yield this.reloadTree(treeId, treeName);\r\n                    fCWindow.close();\r\n                })).catch(() => {\r\n                    Tools_1.Tools.popupBox(__classPrivateFieldGet(this, _NodesExample_transl, \"f\").reqErrTitle, __classPrivateFieldGet(this, _NodesExample_transl, \"f\").reqErrTitle);\r\n                });\r\n            }\r\n            else {\r\n                nodeNameInput.setError(__classPrivateFieldGet(this, _NodesExample_transl, \"f\").errEmptyNodeName);\r\n            }\r\n        });\r\n        const appender = fCWindow.resultsElement();\r\n        appender.appendChild(nodeNameInput.html);\r\n    }\r\n    createTree() {\r\n        let nodeNameValue = \"\";\r\n        const nodeNameInput = Elements_1.Elements.newInput({\r\n            name: \"tree-name\",\r\n            placeholder: __classPrivateFieldGet(this, _NodesExample_transl, \"f\").enterTreeName,\r\n            classes: [\"collection-name\"],\r\n            prefix: __classPrivateFieldGet(this, _NodesExample_transl, \"f\").enterTreeName,\r\n            callOnClick: {\r\n                callType: \"input\",\r\n                callFnName: \"createnewtree\",\r\n                fn: (input) => {\r\n                    nodeNameValue = input.value;\r\n                    if (nodeNameValue !== \"\") {\r\n                        nodeNameInput.clearError();\r\n                    }\r\n                    else {\r\n                        nodeNameInput.setError(__classPrivateFieldGet(this, _NodesExample_transl, \"f\").errEmptyTreeName);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        const fCWindow = new ActionWindow_1.ActionWindow({\r\n            context: this,\r\n            title: __classPrivateFieldGet(this, _NodesExample_transl, \"f\").newNodeTitle,\r\n            parentClass: \"get-hours-report-window\",\r\n            callbackBtnYesText: __classPrivateFieldGet(this, _NodesExample_transl, \"f\").saveAndExit\r\n        }).removeNoBtn().addCloseX().setCallbackYes(() => __awaiter(this, void 0, void 0, function* () {\r\n            if (nodeNameValue !== \"\") {\r\n                nodeNameInput.clearError();\r\n                const treeData = yield this.fetchTree(nodeNameValue);\r\n                this.appendTreeToList({ name: treeData.name, id: treeData.id });\r\n                fCWindow.close();\r\n            }\r\n            else {\r\n                nodeNameInput.setError(__classPrivateFieldGet(this, _NodesExample_transl, \"f\").errEmptyNodeName);\r\n            }\r\n        }));\r\n        const appender = fCWindow.resultsElement();\r\n        appender.appendChild(nodeNameInput.html);\r\n    }\r\n    fetchTree(treeId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const transl = __classPrivateFieldGet(this, _NodesExample_transl, \"f\");\r\n            return new Promise((resolve, reject) => {\r\n                Fetcher_1.Fetcher.makePostFetch({\r\n                    url: \"/fetchTree/\" + treeId,\r\n                    data: { treeId },\r\n                    method: \"POST\",\r\n                    spinnerMsg: transl.gettingTreeSpinner\r\n                }).then((tree) => {\r\n                    console.log(\"tree\", tree);\r\n                    __classPrivateFieldGet(this, _NodesExample_treesList, \"f\")[tree.name] = { name: tree.name, id: tree.id };\r\n                    localStorage.setItem(\"myTrees\", JSON.stringify(__classPrivateFieldGet(this, _NodesExample_treesList, \"f\")));\r\n                    resolve(tree);\r\n                }).catch(() => {\r\n                    Tools_1.Tools.popupBox(__classPrivateFieldGet(this, _NodesExample_transl, \"f\").reqErrTitle, __classPrivateFieldGet(this, _NodesExample_transl, \"f\").reqErrTitle);\r\n                    reject({});\r\n                });\r\n            });\r\n        });\r\n    }\r\n    reloadTree(treeId, treeName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            __classPrivateFieldGet(this, _NodesExample_nodesResults, \"f\").innerHTML = \"\";\r\n            const treeData = yield this.fetchTree(treeName);\r\n            if (!treeData || Object.keys(treeData).length === 0) {\r\n                return;\r\n            }\r\n            const ul = document.createElement('ul');\r\n            ul.appendChild(this.createTreeNodes(treeData, treeId, treeName));\r\n            __classPrivateFieldGet(this, _NodesExample_nodesResults, \"f\").appendChild(ul);\r\n        });\r\n    }\r\n    createTreeNodes(node, treeId, treeName) {\r\n        const li = document.createElement('li');\r\n        const nodeName = Elements_1.Elements.newElement({\r\n            text: node.name,\r\n            classes: [\"node-name\"]\r\n        });\r\n        const addNewNodeBtn = Elements_1.Elements.newButton({\r\n            btnClasses: [\"center\"],\r\n            iconClasses: [\"fa-solid\", \"fa-circle-plus\"],\r\n            callOnClick: {\r\n                callType: \"click\",\r\n                callDebounce: 1000,\r\n                callFnName: \"createNewNode\",\r\n                fn: () => {\r\n                    this.createNode(node.id, node.name, treeId, treeName);\r\n                }\r\n            }\r\n        });\r\n        const removeNodeBtn = Elements_1.Elements.newButton({\r\n            btnClasses: [\"center\"],\r\n            iconClasses: [\"fa-solid\", \"fa-circle-minus\"],\r\n            callOnClick: {\r\n                callType: \"click\",\r\n                callDebounce: 1000,\r\n                callFnName: \"createNewNode\",\r\n                fn: () => {\r\n                    Tools_1.Tools.approveActionPopupBox({\r\n                        msg: __classPrivateFieldGet(this, _NodesExample_transl, \"f\").approveDel,\r\n                        okFn: (approveModal) => {\r\n                            approveModal.remove();\r\n                            Fetcher_1.Fetcher.makePostFetch({\r\n                                url: `/deleteNodeInTree/${treeName}/${node.id}`,\r\n                                data: { parentNodeId: node.id, treeName: treeName },\r\n                                method: \"POST\",\r\n                                spinnerMsg: __classPrivateFieldGet(this, _NodesExample_transl, \"f\").gettingTreeSpinner\r\n                            }).then((tree) => __awaiter(this, void 0, void 0, function* () {\r\n                                if (tree && tree.data && tree.data.message) {\r\n                                    Tools_1.Tools.popupBox(__classPrivateFieldGet(this, _NodesExample_transl, \"f\").message + \" \" + tree.id, __classPrivateFieldGet(this, _NodesExample_transl, \"f\")[tree.data.message.toLowerCase().replace(/[\\'\\s]/g, '')]);\r\n                                    return;\r\n                                }\r\n                                yield this.reloadTree(treeId, treeName);\r\n                            })).catch((er) => {\r\n                                Tools_1.Tools.popupBox(__classPrivateFieldGet(this, _NodesExample_transl, \"f\").reqErrTitle, __classPrivateFieldGet(this, _NodesExample_transl, \"f\").reqErrTitle);\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n        const renameNodeBtn = Elements_1.Elements.newButton({\r\n            btnClasses: [\"center\"],\r\n            iconClasses: [\"fa-solid\", \"fa-pencil\"],\r\n            callOnClick: {\r\n                callType: \"click\",\r\n                callDebounce: 1000,\r\n                callFnName: \"renameNode\",\r\n                fn: () => {\r\n                    console.log(\"renameNodeBtn\", node);\r\n                    this.renameNode(node.id, node.name, treeId, treeName);\r\n                }\r\n            }\r\n        });\r\n        const buttonsArray = Elements_1.Elements.newElement({\r\n            classes: [\"node-represent-container\"],\r\n            append: [\r\n                nodeName,\r\n                addNewNodeBtn,\r\n                renameNodeBtn,\r\n                removeNodeBtn\r\n            ]\r\n        });\r\n        li.classList.add(\"node-details-container\");\r\n        li.classList.add(\"node-details-container\");\r\n        li.appendChild(buttonsArray);\r\n        li.addEventListener(\"click\", (e) => {\r\n            var _a;\r\n            e.stopPropagation();\r\n            const el = e.target;\r\n            if (!el.classList.contains(\"node-name\")) {\r\n                return;\r\n            }\r\n            const parent = (_a = el.parentElement) === null || _a === void 0 ? void 0 : _a.parentElement;\r\n            if (!parent) {\r\n                return;\r\n            }\r\n            const childTree = parent.querySelector(\".child-tree\");\r\n            if (!childTree) {\r\n                return;\r\n            }\r\n            if (childTree.classList.contains(\"active\")) {\r\n                childTree.classList.remove(\"active\");\r\n                childTree.classList.add(\"inactive\");\r\n                return;\r\n            }\r\n            childTree.classList.remove(\"inactive\");\r\n            childTree.classList.add(\"active\");\r\n        });\r\n        if (node.children && node.children.length > 0) {\r\n            const ul = document.createElement('ul');\r\n            ul.classList.add(\"child-tree\");\r\n            ul.classList.add(\"active\");\r\n            node.children.forEach((child) => {\r\n                ul.appendChild(this.createTreeNodes(child, treeId, treeName));\r\n            });\r\n            li.appendChild(ul);\r\n        }\r\n        return li;\r\n    }\r\n}\r\nexports.NodesExample = NodesExample;\r\n_NodesExample_parentNode = new WeakMap(), _NodesExample_treesListResultsCls = new WeakMap(), _NodesExample_nodesResults = new WeakMap(), _NodesExample_treesList = new WeakMap(), _NodesExample_transl = new WeakMap();\r\n\n\n//# sourceURL=webpack://godevmodewebpack/./scripts/components/NodesExample.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./scripts/Main.js");
/******/ 	
/******/ })()
;